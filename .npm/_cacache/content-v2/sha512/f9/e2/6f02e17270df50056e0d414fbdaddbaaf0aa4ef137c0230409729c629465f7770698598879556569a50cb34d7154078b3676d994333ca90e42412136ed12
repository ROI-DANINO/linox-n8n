{"_id":"lop","_rev":"20-3e71042bfc26a450519c03508a83d4be","name":"lop","dist-tags":{"latest":"0.4.2"},"versions":{"0.2.4":{"name":"lop","version":"0.2.4","_id":"lop@0.2.4","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"dist":{"shasum":"c7b3f55d4df557fca8d366290107bb4d34679c9e","tarball":"https://registry.npmjs.org/lop/-/lop-0.2.4.tgz","integrity":"sha512-23YaLBOsoE6D2zJTXJxD3uGEwivcjG3NzPFeZZ1/UsYN3OrKQ7p5t21V3HeGOVUGBZz9lLJJjJI2m9qdC7zP0Q==","signatures":[{"sig":"MEQCIHutng+njU9Tsk61kXkeMUVwyg/ytVNM+aWcOyZqWwJEAiBXSzoDDmmsJpvwhMOquYU49a4rdAsFofzvutn8qxKgAg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"description":"lop is a library to create parsers using parser combinators with helpful errors.","directories":{},"dependencies":{"duck":"git://github.com/mwilliamson/duck.js.git","options":"git://github.com/mwilliamson/node-options.git","underscore":"latest"},"devDependencies":{"nodeunit":"latest"}},"0.2.5":{"name":"lop","version":"0.2.5","_id":"lop@0.2.5","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"dist":{"shasum":"49f0ace42c5b327bb0466939b9831857c13afd0c","tarball":"https://registry.npmjs.org/lop/-/lop-0.2.5.tgz","integrity":"sha512-KCxEu1xLgJrnh3u3zBxqiKxncoG6J0cGLsxlmMMyPWSK5Jn/55xibcFOYFS/zjagII5fM2qyX791yrOSgb5yTw==","signatures":[{"sig":"MEQCIG3T8Jx6swMERriuXuSq5ApsZbSpjnu824ElCwvqIMiyAiBp/uEEytzXyXz9ulHI1wu/aR7xT/RC58Pj8MjxGJbwwQ==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"description":"lop is a library to create parsers using parser combinators with helpful errors.","directories":{},"dependencies":{"duck":"git://github.com/mwilliamson/duck.js.git","option":"0.2.x","underscore":"latest"},"devDependencies":{"nodeunit":"latest"}},"0.2.6":{"name":"lop","version":"0.2.6","_id":"lop@0.2.6","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"dist":{"shasum":"98a94353886e902ea5f142e7a08f3c20096d740d","tarball":"https://registry.npmjs.org/lop/-/lop-0.2.6.tgz","integrity":"sha512-v9Ye/uzTKB9YseR8n3iECbhJJ1jnlJluNQlnWKQrnOgrVVjYjvywtZBKKRnzNRH/v5a83su4hWn0Tgom9rdjFw==","signatures":[{"sig":"MEUCIQCrW7rpGvpR/XiwpBMM1Pq/10tOgcBpJdyIUoNoDqMn+AIgQxRcX6S+enJUy/VfQFG3SFbadyoGBJm+/66elagWYsg=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"_npmVersion":"1.1.63","description":"lop is a library to create parsers using parser combinators with helpful errors.","directories":{},"dependencies":{"duck":"git://github.com/mwilliamson/duck.js.git","option":"0.2.x","underscore":"latest"},"devDependencies":{"nodeunit":"latest"}},"0.2.7":{"name":"lop","version":"0.2.7","_id":"lop@0.2.7","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"dist":{"shasum":"24dfac22e37a77ec65b1e5a50a73d5ab71989a7e","tarball":"https://registry.npmjs.org/lop/-/lop-0.2.7.tgz","integrity":"sha512-QQQVknEwqEPLyzapQSgRoyxOiJ0iusUCoDWrsNK0/KC61p57yhzvBVpgb3HFnCOWPqDuQjkat1nxhq0bOAlR7A==","signatures":[{"sig":"MEUCIHUuRHx5vg5tdEbrmfuvhrdK6H9lDxwozFnbNTVFfA7aAiEAttoG30yMc4eLQpcC0r2AIW4lwBXdVotRwTiy4fPNWkU=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"_from":".","_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"_npmVersion":"1.2.14","description":"lop is a library to create parsers using parser combinators with helpful errors.","directories":{},"dependencies":{"duck":"~0.1.10","option":"0.2.x","underscore":"~1.4.4"},"devDependencies":{"nodeunit":"~0.8.0"}},"0.2.8":{"name":"lop","version":"0.2.8","keywords":["parse","parser","combinator"],"author":{"name":"Michael Williamson","email":"mike@zwobble.org"},"license":"BSD","_id":"lop@0.2.8","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"dist":{"shasum":"b7df0056e616ad6e56e16b6cbd778ef587c93f7d","tarball":"https://registry.npmjs.org/lop/-/lop-0.2.8.tgz","integrity":"sha512-vHkrUB22RJjRrOMjHBIiNCdsuDoS1b+AOyJXfYS13Zw+iN0KQTK3Ze1ymHDPy1nAinK8fp1B0pirER9QUmcSAQ==","signatures":[{"sig":"MEUCIQD2Go7PXeqZzgkVEiLbzSwCUBnb7tnAP2Z3bz6vs6yPPQIgBNTcadP9x7gUx4G8MInc1+eZxkdbCT7xiu3t9xY6014=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"_from":".","_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"repository":{"url":"https://github.com/mwilliamson/lop.git","type":"git"},"_npmVersion":"1.2.14","description":"Create parsers using parser combinators with helpful error messages","directories":{},"dependencies":{"duck":"~0.1.11","option":"~0.2.1","underscore":"~1.4.4"},"devDependencies":{"nodeunit":"~0.8.0"}},"0.3.0":{"name":"lop","version":"0.3.0","keywords":["parse","parser","combinator"],"author":{"name":"Michael Williamson","email":"mike@zwobble.org"},"license":"BSD","_id":"lop@0.3.0","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"homepage":"https://github.com/mwilliamson/lop","bugs":{"url":"https://github.com/mwilliamson/lop/issues"},"dist":{"shasum":"ef05ba0a4ab440477b805aaffe052ede52fa0a02","tarball":"https://registry.npmjs.org/lop/-/lop-0.3.0.tgz","integrity":"sha512-5YeUUcSlGgBCYzouwk1bgQAEOW4F7UAEo9JE8dho4iJwRV60EUyeePKentXYDdd7JEfHNbxvwmNF7FPB0WtoLQ==","signatures":[{"sig":"MEQCICekbPLg4Tyz7PNeVI9q9PXuUV5UaPKaKsdxcTAUNIAkAiB3BOk0IuOomdGDrCKOfYeLUkgcMb6Kn4xKqBMEIvLqkw==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"_from":".","_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"repository":{"url":"https://github.com/mwilliamson/lop.git","type":"git"},"_npmVersion":"1.4.3","description":"Create parsers using parser combinators with helpful error messages","directories":{},"dependencies":{"duck":"~0.1.11","option":"~0.2.1","underscore":"~1.4.4"},"devDependencies":{"nodeunit":"~0.8.0"}},"0.4.0":{"name":"lop","version":"0.4.0","keywords":["parse","parser","combinator"],"author":{"name":"Michael Williamson","email":"mike@zwobble.org"},"license":"BSD","_id":"lop@0.4.0","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"homepage":"https://github.com/mwilliamson/lop","bugs":{"url":"https://github.com/mwilliamson/lop/issues"},"dist":{"shasum":"4f0e4384d5c4f455d0b86d254fd52a9d05593c2c","tarball":"https://registry.npmjs.org/lop/-/lop-0.4.0.tgz","integrity":"sha512-Wyb8zjlp4DqpBu68phEM469PYm2Ii1FhgYHRtst4VpGvwOmBS9HSPKfZZGHd+iqnstAFoQzGDMx6aq5Al5+jmQ==","signatures":[{"sig":"MEUCIEyoJeAFMK+o7MafWUnVfqYhQgcGezOg+7iIuVbzUsXbAiEA3uT6eWzayHoxrNT39j3OvzkTl4CN/x8qMHkzXYryEI8=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}]},"_from":".","_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"repository":{"url":"https://github.com/mwilliamson/lop.git","type":"git"},"_npmVersion":"1.4.3","description":"Create parsers using parser combinators with helpful error messages","directories":{},"dependencies":{"duck":"~0.1.11","option":"~0.2.1","underscore":"~1.4.4"},"devDependencies":{"nodeunit":"~0.8.0"},"_npmOperationalInternal":{"tmp":"tmp/lop-0.4.0.tgz_1466545893126_0.9578011357225478","host":"packages-16-east.internal.npmjs.com"}},"0.4.1":{"name":"lop","version":"0.4.1","keywords":["parse","parser","combinator"],"author":{"name":"Michael Williamson","email":"mike@zwobble.org"},"license":"BSD-2-Clause","_id":"lop@0.4.1","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"homepage":"https://github.com/mwilliamson/lop#readme","bugs":{"url":"https://github.com/mwilliamson/lop/issues"},"dist":{"shasum":"744f1696ef480e68ce1947fe557b09db5af2a738","tarball":"https://registry.npmjs.org/lop/-/lop-0.4.1.tgz","fileCount":27,"integrity":"sha512-9xyho9why2A2tzm5aIcMWKvzqKsnxrf9B5I+8O30olh6lQU8PH978LqZoI4++37RBgS1Em5i54v1TFs/3wnmXQ==","signatures":[{"sig":"MEYCIQD5YQV4tLjjtosOrdwzRQ1I/Y6c2rLgZow3Ti30aZqhCgIhAK5zFysq+Y4T4ul32PTzaRMJqR/nRAVdRwhSau+GBDiM","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":75540,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgmu/PCRA9TVsSAnZWagAAr94QAIfejHjk+Gad97aw0Tet\nHEmhRRqP4k5qGVHUdeJppVQwj1KxD0in6NSzgczh44CG2bRNNc2X5pp9ecwn\n0GJe+R4nEUsEfCrbZzgBufOZBBjfuOtz4Pv0WqIe4uybndOIsJ7tunVe+/eb\n/nA/o9GIabo1e7T/M9SqCjYFSdj+b6qSNoWp91n4nFs4rfHtRi5+GUS8eR1V\nMA6rYY4pSzkPqwpfj5JbkQ9sWNYnjOEr4TrhNDtqdzhOcU1BITRvWtp556pq\naoDkI8if7F40S0nImMaErQ0eOhuS1N19i5xkF89rQuZO6RLbCvbfYrCArJGX\ne48V1SOFs5IZG1VqlK94OpB8ruF5i0K/IW79ZOFH1jNdqAdUvp+TYUTfMwgY\nfnUy/lwTz8xqENk1tuJlkPhWbUc1eEBFV9Tm/5cIRfKukp/gSAnSVNs1xcvi\nLKcYVZxJVg/sI8fQPTVWR30/4Uth1jYc7yBwNYmqPHici1wwXE+Er3hYrHtt\n4GlAeSa7QE6QY6qDB1F7ZEXbCQuJRo6MfPuR4kBkvFHvSZrSlcReeYLHeadF\nw2QbJE/woICo+WTLL4n8dswvRtzfYt0i3gwe0lEnvSNG2a2b2srcyNDttaFA\ntqLofuWCBw8llhlpp451ECN+/VYyqkdb1MTWErg8TaEVihD8fHzzJ4/STmoN\nkJOF\r\n=vlcE\r\n-----END PGP SIGNATURE-----\r\n"},"gitHead":"102ecd1878ee0ff66b4afe5740a9fad1e6410688","_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"repository":{"url":"git+https://github.com/mwilliamson/lop.git","type":"git"},"_npmVersion":"6.14.6","description":"Create parsers using parser combinators with helpful error messages","directories":{},"_nodeVersion":"12.18.3","dependencies":{"duck":"^0.1.12","option":"~0.2.1","underscore":"^1.13.1"},"_hasShrinkwrap":false,"devDependencies":{"nodeunit":"~0.8.0"},"_npmOperationalInternal":{"tmp":"tmp/lop_0.4.1_1620766670580_0.948293184698406","host":"s3://npm-registry-packages"}},"0.4.2":{"name":"lop","version":"0.4.2","author":{"name":"Michael Williamson","email":"mike@zwobble.org"},"description":"Create parsers using parser combinators with helpful error messages","keywords":["parse","parser","combinator"],"repository":{"type":"git","url":"git+https://github.com/mwilliamson/lop.git"},"dependencies":{"duck":"^0.1.12","option":"~0.2.1","underscore":"^1.13.1"},"devDependencies":{"nodeunit":"~0.8.0"},"license":"BSD-2-Clause","_id":"lop@0.4.2","gitHead":"951121a0e6b2f3a491a55c5ca63b6648deecf591","bugs":{"url":"https://github.com/mwilliamson/lop/issues"},"homepage":"https://github.com/mwilliamson/lop#readme","_nodeVersion":"21.7.1","_npmVersion":"10.5.0","dist":{"integrity":"sha512-RefILVDQ4DKoRZsJ4Pj22TxE3omDO47yFpkIBoDKzkqPRISs5U1cnAdg/5583YPkWPaLIYHOKRMQSvjFsO26cw==","shasum":"c9c2f958a39b9da1c2f36ca9ad66891a9fe84640","tarball":"https://registry.npmjs.org/lop/-/lop-0.4.2.tgz","fileCount":27,"unpackedSize":75488,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICaZqr8/Ei06Q/HaPWepx+dDppJ173/K1BYgwflycK2LAiA+Ooic3EagnwCKNY5UNC26ZEI99IfE8n6X/uKIEIcz5w=="}]},"_npmUser":{"name":"mwilliamson","email":"mike@zwobble.org"},"directories":{},"maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/lop_0.4.2_1725294555015_0.9208974889723516"},"_hasShrinkwrap":false}},"time":{"created":"2012-08-25T15:47:33.708Z","modified":"2024-09-02T16:29:15.377Z","0.2.4":"2012-08-25T15:47:35.598Z","0.2.5":"2012-08-25T21:41:54.609Z","0.2.6":"2013-03-30T14:52:44.282Z","0.2.7":"2013-04-12T21:10:27.866Z","0.2.8":"2013-04-14T11:37:50.234Z","0.2.9":"2015-08-15T08:29:25.222Z","0.3.0":"2015-08-15T08:43:15.526Z","0.4.0":"2016-06-21T21:51:34.843Z","0.4.1":"2021-05-11T20:57:50.773Z","0.4.2":"2024-09-02T16:29:15.220Z"},"bugs":{"url":"https://github.com/mwilliamson/lop/issues"},"author":{"name":"Michael Williamson","email":"mike@zwobble.org"},"license":"BSD-2-Clause","homepage":"https://github.com/mwilliamson/lop#readme","keywords":["parse","parser","combinator"],"repository":{"type":"git","url":"git+https://github.com/mwilliamson/lop.git"},"description":"Create parsers using parser combinators with helpful error messages","maintainers":[{"name":"mwilliamson","email":"mike@zwobble.org"}],"readme":"# lop -- parsing library for JavaScript\n\nlop is a library to create parsers using parser combinators with helpful errors.\n\n```javascript\n\nfunction parse(tokens) {\n    var parser = lop.Parser();\n    return parser.parseTokens(expressionRule, tokens);\n}\n\n// This rule is wrapped inside lop.rule to defer evaluation until\n// the rule is used -- otherwise, it would reference integerRule\n// and ifRule, which don't exist yet.\nvar expressionRule = lop.rule(function() {\n    return rules.firstOf(\"expression\",\n        integerRule,\n        ifRule\n    );\n});\n\nvar integerRule = rules.then(\n    rules.tokenOfType(\"integer\"),\n    function(value) {\n        return new IntegerNode(parseInt(value, 10));\n    }\n);\n\nvar ifRule = rules.sequence(\n    rules.token(\"keyword\", \"if\"),\n    rules.sequence.cut(),\n    rules.sequence.capture(expressionRule),\n    rules.token(\"keyword\", \"then\"),\n    rules.sequence.capture(expressionRule),\n    rules.token(\"keyword\", \"else\"),\n    rules.sequence.capture(expressionRule)\n).map(function(condition, trueBranch, falseBranch) {\n    return new IfNode(condition, trueBranch, falseBranch);\n});\n```\n\nlop tries to provide helpful errors where possible. For instance, in `ifRule`\nas defined above, there is a cut following the keyword `if`. Before the cut,\nif we fail to match the input, we can backtrack -- in this case, we backtrack\nand see if another form of expression might match the input. However, after the\ncut, we prevent backtracking. Once we've see the keyword `if`, there's no doubt\nabout which sort of expression this is, so if parsing fails later in this rule,\nthere's no point in backtracking. This allows informative error messages to be\ngenerated: if we try to parse the string `\"if 1 42 else 12\"`, we get the error:\n\n    Error: File: /tmp/lop-example\n    Line number: 1\n    Character number: 6:\n    Expected keyword \"then\"\n    but got integer \"42\"\n\n## Tokens\n\nWhen using a parser built with lop, the input is an array of tokens. A token can be any value so long as it has the property `source`, which must be a `StringSourceRange`.\n\n### Regex tokeniser\n\nThe easiest way to create a tokeniser is using lop's regex tokeniser.\nA regex tokeniser can be constructed by calling `new lop.RegexTokeniser(rules)`,\nwhere `rules` is a list of token rules.\nA token rule should have a `name` property that uniquely identifies that rule,\nand a `regex` property that is an instance of `RegExp` describing the token.\n\nCalling `tokenise` with a string will return a list of tokens.\nEach token has three properties:\n\n* `type`\n* `value`\n* `source`\n\nThe tokeniser will apply the regex from each rule in order at the current position.\nThe current position is initially zero, the start of the string.\nThe first rule with a matching regex is used to produce a token,\nwith the token's `value` being the first capture of the regex,\nor `undefined` if the regex does not define any capture groups.\nThe current position is incremented to the index of the first character unmatched by the regex.\nIf no rule matches at the current position,\na single character `unrecognisedCharacter` token is produced,\nand the current position is incremented by one.\n\nFor instance, to create a simple tokeniser that generates a stream of words tokens separated by whitespace tokens.\n\n```javascript\nvar lop = require(\"lop\");\n\nvar rules = [\n    {\n        name: \"identifier\",\n        regex: /(\\s+)/\n    },\n    {\n        name: \"whitespace\",\n        regex: /(\\S+)/\n    }\n];\nvar tokeniser = new lop.RegexTokeniser(rules);\ntokeniser.tokenise(input);\n```\n\n### Custom tokenisers\n\nYou can also create your own tokeniser.\nFor instance, to create a simple tokeniser that generates a stream of words tokens separated by whitespace tokens:\n\n```javascript\nvar StringSource = require(\"lop\").StringSource;\n\nfunction tokeniseString(string) {\n    return tokenise(new StringSource(string, \"raw string\"));\n}\n\nfunction tokenise(source) {\n    var string = source.asString();\n    var whitespaceRegex = /(\\s+)/g;\n    var result;\n    var start = 0;\n    var parts = [];\n    \n    while ((result = whitespaceRegex.exec(source)) !== null) {\n        parts.push({\n            type: \"word\",\n            value: string.substring(start, result.index),\n            source: source.range(start, result.index)\n        });\n        parts.push({\n            type: \"whitespace\",\n            value: result[1],\n            source: source.range(result.index, whitespaceRegex.lastIndex)\n        });\n        start = whitespaceRegex.lastIndex;\n    }\n    parts.push({\n        type: \"word\",\n        value: string.substring(start),\n        source: source.range(start, string.length)\n    });\n    parts.push({\n        type: \"end\",\n        source: source.range(string.length, string.length)\n    });\n    return parts.filter(function(part) {\n        return part.type !== \"word\" || part.value !== \"\";\n    });\n}\n```\n\nlop also defines its own notion of a token. Each instance of `lop.Token` has a type, name, and source, similarly to most of the tokens that would be created by the token above. For instance, instead of:\n\n    {\n        type: \"word\",\n        value: value,\n        source: source\n    }\n\nyou could use:\n\n    new Token(\"word\", value, source)\n\nThe main advantage of using `lop.Token` is that you can then use the rules `lop.rules.token` and `lop.rules.tokenOfType` (described later). If you don't use `lop.Token`, you must define your own atomic rules, but you can use the other rules without any modifications.\n\n## Parser\n\nTo parse an array of tokens, you can call the method `parseTokens` on `lop.Parser`, passing in the parsing rule and the array of tokens. For instance, assuming we already have a `tokenise` function (the one above would do fine):\n\n```javascript\nfunction parseSentence(source) {\n    var tokens = tokenise(source);\n    var parser = new lop.Parser();\n    var parseResult = parser.parseTokens(sentenceRule, tokens);\n    if (!parseResult.isSuccess()) {\n        throw new Error(\"Failed to parse: \" + describeFailure(parseResult));\n    }\n    return parseResult.value();\n}\n\nfunction describeFailure(parseResult) {\n    return parseResult.errors().map(describeError).join(\"\\n\");\n   \n    function describeError(error) {\n        return error.describe();\n    }\n}\n```\n\nThe result of parsing can be success, failure, or error. While failure indicates\nthat the rule didn't match the input tokens, error indicates that the input\nwas invalid in some way. In general, rules will backtrack when they\nencounter a failure, but will completely abort when they encounter an error.\nEach of these results has a number of methods:\n\n```javascript\n    result.isSuccess() // true for success, false otherwise\n    result.isFailure() // true for failure, false otherwise\n    result.isError() // true for error, false otherwise\n    result.value() // if success, the value that was parsed\n    result.remaining() // if success, the tokens that weren't consumed by parsing\n    result.source() // the StringSourceRange containing the consumed tokens\n    result.errors() // if failure or error, an array of descriptions of the failure/error\n```\n\nThe final question is then: how do we define rules for the parser, such as the currently undefined `sentenceRule`?\n\n## Rules\n\nEach rule in lop accepts an iterator over tokens, and returns a result, as\ndescribed in the previous section.\n\n### lop.rules.token(*tokenType*, *value*)\n\nSuccess if the next token has type `tokenType` and value `value`, failure\notherwise. Value on success is the value of the token.\n\n### lop.rules.tokenOfType(*tokenType*)\n\nSuccess if the next token has type `tokenType`, failure otherwise. Value on\nsuccess is the value of the token.\n\n### lop.rules.firstOf(*name*, *subRules*)\n\nTries each rule in `subRules` on the input tokens in turn. We return the result\nfrom the first sub-rule that returns success or error. In other words, return the\nresult from the first sub-rule that doesn't return failure. If all sub-rules return\nfailure, this rule returns failure.\n\n### lop.rules.then(*subRule*, *func*)\n\nTry `subRule` on the input tokens, and if successful, map over the result. For\ninstance:\n\n```javascript\nlop.rules.then(\n    lop.rules.tokenOfType(\"integer\"),\n    function(tokenValue) {\n        return parseInt(tokenValue, 10);\n    }\n)\n```\n\n### lop.rules.optional(*subRule*)\n\nTry `subRule` on the input tokens. If the sub-rule is successful with the value\n`value`, then return success with the value `options.some(value)`. If the sub-rule fails, return\nsuccess with the value `options.none`. If the sub-rules errors, return that error.\n","readmeFilename":"README.md"}